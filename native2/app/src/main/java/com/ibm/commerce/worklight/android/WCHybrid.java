package com.ibm.commerce.worklight.android;

/*
 *-----------------------------------------------------------------
 * Licensed Materials - Property of IBM
 *
 * WebSphere Commerce
 *
 * (C) Copyright IBM Corp. 2013 All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with
 * IBM Corp.
 *-----------------------------------------------------------------
 */
//*---------------------------------------------------------------------
//* The sample contained herein is provided to you "AS IS".
//*
//* It is furnished by IBM as a simple example and has not been  
//* thoroughly tested
//* under all conditions.  IBM, therefore, cannot guarantee its 
//* reliability, serviceability or functionality.  
//*
//* This sample may include the names of individuals, companies, brands 
//* and products in order to illustrate concepts as completely as 
//* possible.  All of these names
//* are fictitious and any similarity to the names and addresses used by 
//* actual persons 
//* or business enterprises is entirely coincidental.
//*---------------------------------------------------------------------//*

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import android.webkit.WebSettings;

import com.worklight.androidgap.api.WL;
import com.worklight.androidgap.api.WLInitWebFrameworkListener;
import com.worklight.androidgap.api.WLInitWebFrameworkResult;

import org.apache.cordova.CordovaActivity;
import org.apache.cordova.DroidGap;

/**
 * WCHybrid class is the default Activity generated by Worklight
 * <p/>
 * Sets the name of the log tag for tracing control.
 * To enable logcat, type the following commands in command shell:
 * adb shell setprop log.tag.WCHybrid DEBUG
 * <p/>
 * <p/>
 * Creates this activity.
 *
 * @param savedInstanceState The saved instance state.
 * @see android.app.Activity#onCreate(android.os.Bundle)
 *//*

public class WCHybrid extends WLDroidGap {

    */
/**
 * Sets the name of the log tag for tracing control.
 * To enable logcat, type the following commands in command shell:
 * adb shell setprop log.tag.WCHybrid DEBUG
 *
 *//*

    public static final String LOG_TAG = WCHybrid.class.getSimpleName();
    private static final String CLASS_NAME = LOG_TAG;

    */
/**
 * Creates this activity.
 * @param savedInstanceState The saved instance state.
 *//*

    @TargetApi(16)
    @Override
    public void onWLInitCompleted(Bundle savedInstanceState) {

        final String METHOD_NAME = CLASS_NAME + ".onWLInitCompleted()";
        boolean loggingEnabled = Log.isLoggable(LOG_TAG, Log.DEBUG);

        if (loggingEnabled) {
            Log.d(METHOD_NAME, "ENTRY");
        }

        // Additional initialization code from onCreate() was moved here
        //DeviceAuthManager.getInstance().setProvisioningDelegate(<Use default ProvisioningDelegateImpl class or replace with your IProvisioningDelegate implementation>);
        super.setIntegerProperty("loadUrlTimeoutValue", 100000); //increase timeout value

        CookieSyncManager.createInstance(appView.getContext());
        CookieManager.getInstance().removeSessionCookie();
        //  If port is 80, do not need use this port, otherwise need add port.
        //String resourceHome = getWLConfig().getProtocol() +"://"+ getWLConfig().getHost() + ":" + getWLConfig().getPort();

        appView.clearCache(true);

        //Set the custom WebViewClient
        WCHybridWebViewClient wcHybridWebViewClient = new WCHybridWebViewClient(this);
        wcHybridWebViewClient.setWebView(appView);
        appView.setWebViewClient(wcHybridWebViewClient);

        //Set the custom WebChromeClient 
        WCHybridChromeClient wcHybridChromeClient = new WCHybridChromeClient(this);
        wcHybridChromeClient.setWebView(appView);
        appView.setWebChromeClient(wcHybridChromeClient);

        //Configure the DroidGap WebView settings
        WebSettings appViewSettings = appView.getSettings();
        appViewSettings.setJavaScriptEnabled(true);
        appViewSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);

        //Append the custom string to the device's user agent string
        String currentUserAgent = appViewSettings.getUserAgentString();
        appViewSettings.setUserAgentString(
                new StringBuffer(currentUserAgent)
                .append(" ")
                .append(getResources().getString(R.string.wl_user_agent))
                .toString()
        );
        
        if (loggingEnabled) {
            Log.d(METHOD_NAME, "Current user agent is: " + appViewSettings.getUserAgentString());
        }

        appViewSettings.setDomStorageEnabled(true);
        appViewSettings.setGeolocationEnabled(true);
        appViewSettings.setGeolocationDatabasePath("/data/data/Test");
        appViewSettings.setSaveFormData(false);
        appViewSettings.setSavePassword(false);
        appView.setBackgroundColor(Color.WHITE); //set background to white so that error page can be displayed

        //Workaround error in Android 4.1+: Origin null is not allowed by Access-Control-Allow-Origin
        //This allows the app to load the local HTML file in order to initialize
        if(android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            if (loggingEnabled) {
                Log.d(METHOD_NAME, "Android OS is greater than 4.0.3. Allowing universal access from file URLs.");
            }
            appView.getSettings().setAllowFileAccess(true);
            //setAllowUniversalAccessFromFileURLs(true);
        }

        if (loggingEnabled) {
            Log.d(METHOD_NAME, "about to load the local home page.");
        }

        super.loadUrl(getWebMainFilePath());

        if (loggingEnabled) {
            Log.d(METHOD_NAME, "finish loading the local home page.");
        }

    }

    */
/**
 * @see android.app.Activity#onCreate(android.os.Bundle)
 *//*

    @Override
    public void onCreate(Bundle savedInstanceState) { 
        super.onCreate(savedInstanceState);
        // Additional initialization code was moved to onWLInitCompleted()
    }

    */

/**
 * @see android.app.Activity# // onResume(android.os.Bundle)
 *//*

    @Override
    public void onResume() {
        super.onResume();
    }

}
*/
public class WCHybrid extends CordovaActivity implements WLInitWebFrameworkListener {

    public static final String LOG_TAG = WCHybrid.class.getSimpleName();
    private static final String CLASS_NAME = LOG_TAG;


    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);

        WL.createInstance(this);

        WL.getInstance().showSplashScreen(this);

        WL.getInstance().initializeWebFramework(getApplicationContext(), this);
    }

    @Override
    public void onInitWebFrameworkComplete(WLInitWebFrameworkResult result) {
        if (result.getStatusCode() == WLInitWebFrameworkResult.SUCCESS) {
            super.loadUrl(WL.getInstance().getMainHtmlFilePath());

            final String METHOD_NAME = CLASS_NAME + ".onWLInitCompleted()";
            boolean loggingEnabled = Log.isLoggable(LOG_TAG, Log.DEBUG);

            if (loggingEnabled) {
                Log.d(METHOD_NAME, "ENTRY");
            }

            // Additional initialization code from onCreate() was moved here
            //DeviceAuthManager.getInstance().setProvisioningDelegate(<Use default ProvisioningDelegateImpl class or replace with your IProvisioningDelegate implementation>);
            super.setIntegerProperty("loadUrlTimeoutValue", 1999000000); //increase timeout value

            CookieSyncManager.createInstance(appView.getContext());
            CookieManager.getInstance().removeSessionCookie();
            //  If port is 80, do not need use this port, otherwise need add port.
            //String resourceHome = getWLConfig().getProtocol() +"://"+ getWLConfig().getHost() + ":" + getWLConfig().getPort();

            appView.clearCache(true);

            //Set the custom WebViewClient
            WCHybridWebViewClient wcHybridWebViewClient = new WCHybridWebViewClient(this);
            wcHybridWebViewClient.setWebView(appView);
            appView.setWebViewClient(wcHybridWebViewClient);

            //Set the custom WebChromeClient
            WCHybridChromeClient wcHybridChromeClient = new WCHybridChromeClient(this);
            wcHybridChromeClient.setWebView(appView);
            appView.setWebChromeClient(wcHybridChromeClient);

            //Configure the DroidGap WebView settings
            WebSettings appViewSettings = appView.getSettings();
            appViewSettings.setJavaScriptEnabled(true);
            appViewSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);

            //Append the custom string to the device's user agent string
            String currentUserAgent = appViewSettings.getUserAgentString();
            appViewSettings.setUserAgentString(
                    new StringBuffer(currentUserAgent)
                            .append(" ")
                            .append(getResources().getString(R.string.wl_user_agent))
                            .toString()
            );

            if (loggingEnabled) {
                Log.d(METHOD_NAME, "Current user agent is: " + appViewSettings.getUserAgentString());
            }

            appViewSettings.setDomStorageEnabled(true);
            appViewSettings.setGeolocationEnabled(true);
            appViewSettings.setGeolocationDatabasePath("/data/data/Test");
            appViewSettings.setSaveFormData(false);
            appViewSettings.setSavePassword(false);
            appView.setBackgroundColor(Color.WHITE); //set background to white so that error page can be displayed

            //Workaround error in Android 4.1+: Origin null is not allowed by Access-Control-Allow-Origin
            //This allows the app to load the local HTML file in order to initialize
            if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.JELLY_BEAN) {
                if (loggingEnabled) {
                    Log.d(METHOD_NAME, "Android OS is greater than 4.0.3. Allowing universal access from file URLs.");
                }
                appView.getSettings().setAllowFileAccess(true);
                //setAllowUniversalAccessFromFileURLs(true);
               appView.getSettings().setAllowUniversalAccessFromFileURLs(true);
            }

            if (loggingEnabled) {
                Log.d(METHOD_NAME, "about to load the local home page.");
            }

            if (loggingEnabled) {
                Log.d(METHOD_NAME, "finish loading the local home page.");
            }


        } else {
            handleWebFrameworkInitFailure(result);
        }
    }

    private void handleWebFrameworkInitFailure(WLInitWebFrameworkResult result) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
        alertDialogBuilder.setNegativeButton(R.string.close, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                finish();
            }
        });

        alertDialogBuilder.setTitle(R.string.error);
        alertDialogBuilder.setMessage(result.getMessage());
        alertDialogBuilder.setCancelable(false).create().show();
    }
}